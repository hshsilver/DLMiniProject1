# -*- coding: utf-8 -*-
"""mini_project_DL_ff.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jhqkiLWgCFdbx_RvPpk229Y5qH-fDtPo
"""

#!pip install torch
#!pip install torchvision

#!conda update --all

import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
class BasicBlock(nn.Module):

    def __init__(self, in_planes, planes, stride=1):
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(
            in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3,
                               stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)

        self.shortcut = nn.Sequential()
        if stride != 1 or in_planes != planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, planes,
                          kernel_size=3, stride=stride,padding=1, bias=False),
                nn.BatchNorm2d(planes)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += self.shortcut(x)
        out = F.relu(out)
        return out



class ResNet(nn.Module):
    def __init__(self, block, num_blocks, num_classes=10):
        super(ResNet, self).__init__()
      
        self.in_planes = 80

        self.conv1 = nn.Conv2d(3, 80, kernel_size=3,
                               stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(80)
        self.dropout1=nn.Dropout(p=0.5)
        #self.layer1 = self._make_layer(block, 20, num_blocks[0], stride=1)
        #self.dropout2=nn.Dropout(p=0.5)
        self.layer2 = self._make_layer(block, 80, num_blocks[1], stride=2)
        self.bn2 = nn.BatchNorm2d(80)
        #self.dropout3=nn.Dropout(p=0.5)
        self.layer3 = self._make_layer(block,160 , num_blocks[2], stride=2)
        self.bn3 = nn.BatchNorm2d(160)
        self.layer4 = self._make_layer(block, 320, num_blocks[3], stride=2)
        self.linear = nn.Linear(320, num_classes)

    def _make_layer(self, block, planes, num_blocks, stride):
        strides = [stride] + [1]*(num_blocks-1)
        layers = []
        for stride in strides:
            layers.append(block(self.in_planes, planes, stride))
            self.in_planes = planes
        return nn.Sequential(*layers)

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out=self.dropout1(out)
       # out = self.layer1(out)
        #out=self.dropout2(out)
        out=self.layer2(out)
        out=self.bn2(out)
        #out=self.dropout3(out)
        out = self.layer3(out)
        out=self.bn3(out)
        out = self.layer4(out)
       # out=self.layer5(out)
        out = F.avg_pool2d(out,3)
        out = out.view(out.size(0), -1)
        out = self.linear(out)
        return out

def project1_model():
    return ResNet(BasicBlock, [2, 2,2,2,2]).to(device)

model = project1_model()
pytorch_total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
print(pytorch_total_params/1000000)

num_epochs = 30
learning_rate = 0.001
transform = transforms.Compose([transforms.Pad(4),
    transforms.RandomHorizontalFlip(),
    transforms.RandomCrop(32),
    transforms.AutoAugment(transforms.AutoAugmentPolicy.CIFAR10),transforms.ToTensor()])
    



# CIFAR-10 dataset
train_dataset = torchvision.datasets.CIFAR10(root='../../data/',
                                             train=True, 
                                             transform=transform,
                                             download=True)

test_dataset = torchvision.datasets.CIFAR10(root='../../data/',
                                            train=False, 
                                            transform=transforms.ToTensor())

# Data loader
train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                           batch_size=100, 
                                           shuffle=True)

test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                          batch_size=100, 
                                          shuffle=False)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)
# For updating learning rate
def update_lr(optimizer, lr):    
    for param_group in optimizer.param_groups:
        param_group['lr'] = lr

# Train the model
total_step = len(train_loader)
curr_lr = learning_rate
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        images = images.to(device)
        labels = labels.to(device)

        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)

        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
    print(epoch , loss.item())
        #if (i+1) % 10 == 0:
        #    print ("Epoch [{}/{}], Step [{}/{}] Loss: {:.4f}"
        #           .format(epoch+1, num_epochs, i+1, total_step, loss.item()))

     #Decay learning rate
    if (epoch+1) % 5 == 0:
       curr_lr /= 3
       update_lr(optimizer, curr_lr)

# Test the model
model.eval()
with torch.no_grad():
    correct = 0
    total = 0
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    print('Accuracy of the model on the test images: {} %'.format(100 * correct / total))

model_path='./project1_model.pt'
torch.save(model.state_dict(),model_path)